// üìÅ todolist-unittest.tsx
import { render, screen, fireEvent } from "@testing-library/react";
import { describe, it, expect } from "vitest";
import { TodoList } from "./TodoList";

// ---------------------------
// üß™ CT01 ‚Äì Campo vazio (n√£o adiciona tarefa)
// ---------------------------
describe("CT01 ‚Äì Campo vazio (n√£o adiciona tarefa)", () => {
  it("n√£o deve adicionar tarefa se o campo estiver vazio", () => {
    render(<TodoList />);

    const addButton = screen.getByTestId("add-todo-button");
    fireEvent.click(addButton);

    expect(
      screen.getByText("Voc√™ n√£o possui nenhuma tarefa.")
    ).toBeInTheDocument();
  });
});

// ---------------------------
// üß™ CT02 ‚Äì Campo v√°lido (adiciona tarefa e limpa campo)
// ---------------------------
describe("CT02 ‚Äì Campo v√°lido (adiciona tarefa e limpa campo)", () => {
  it("deve adicionar uma nova tarefa e limpar o campo", () => {
    render(<TodoList />);

    const input = screen.getByTestId("new-todo-input");
    const addButton = screen.getByTestId("add-todo-button");

    fireEvent.change(input, { target: { value: "Estudar React" } });
    fireEvent.click(addButton);

    expect(screen.getByText("Estudar React")).toBeInTheDocument();
    expect((input as HTMLInputElement).value).toBe("");
  });
});

// ---------------------------
// üß™ CT03 ‚Äì Alternar status da tarefa
// ---------------------------
describe("CT03 ‚Äì Alternar status da tarefa", () => {
  it("deve alternar o status da tarefa entre conclu√≠da e n√£o conclu√≠da", () => {
    const initialTodos = [{ id: 1, text: "Ler livro", completed: false }];
    render(<TodoList initialTodos={initialTodos} />);

    const checkbox = screen.getByTestId("todo-checkbox-1") as HTMLInputElement;

    // Marca como conclu√≠do
    fireEvent.click(checkbox);
    expect(checkbox.checked).toBe(true);

    // Desmarca
    fireEvent.click(checkbox);
    expect(checkbox.checked).toBe(false);
  });

  // CT04 ‚Äì Deletar tarefa
  it("CT04: deve deletar uma tarefa existente", () => {
    render(
      <TodoList initialTodos={[{ id: 1, text: "Ler livro", completed: false }]} />
    );

    const deleteButton = screen.getByTestId("delete-todo-1");
    fireEvent.click(deleteButton);

    expect(screen.queryByText("Ler livro")).not.toBeInTheDocument();
    expect(
      screen.getByText("Voc√™ n√£o possui nenhuma tarefa.")
    ).toBeInTheDocument();
  });

  // CT05 ‚Äì Estat√≠sticas / contador ao adicionar e alternar
  it("CT05: deve atualizar estat√≠sticas ao adicionar tarefas e alternar conclus√£o", () => {
    render(<TodoList />);

    const input = screen.getByTestId("new-todo-input") as HTMLInputElement;
    const addButton = screen.getByTestId("add-todo-button");

    // Adiciona duas tarefas
    fireEvent.change(input, { target: { value: "Tarefa A" } });
    fireEvent.click(addButton);

    fireEvent.change(input, { target: { value: "Tarefa B" } });
    fireEvent.click(addButton);

    // Nenhuma conclu√≠da inicialmente
    expect(screen.getByTestId("todo-stats").textContent).toBe(
      "0 de 2 conclu√≠dos"
    );

    // Marca a primeira como conclu√≠da
    const checkbox1 = screen.getByTestId("todo-checkbox-1") as HTMLInputElement;
    fireEvent.click(checkbox1);
    expect(screen.getByTestId("todo-stats").textContent).toBe(
      "1 de 2 conclu√≠dos"
    );
  });

  // CT06 ‚Äì Adicionar com a tecla Enter
  it("CT06: deve adicionar tarefa quando o usu√°rio pressiona Enter no input", () => {
    render(<TodoList />);

    const input = screen.getByTestId("new-todo-input") as HTMLInputElement;

    fireEvent.change(input, { target: { value: "Adicionar com Enter" } });
    // onKeyPress no componente escuta 'Enter'
    fireEvent.keyPress(input, { key: "Enter", code: "Enter", charCode: 13 });

    expect(screen.getByText("Adicionar com Enter")).toBeInTheDocument();
  });

  // CT07 ‚Äì Bot√£o disabled e trim de espa√ßos
  it("CT07: bot√£o 'Adicionar' deve ficar desabilitado com input vazio/apenas espa√ßos e habilitado com texto; ap√≥s adicionar volta a desabilitar", () => {
    render(<TodoList />);

    const input = screen.getByTestId("new-todo-input") as HTMLInputElement;
    const addButton = screen.getByTestId("add-todo-button") as HTMLButtonElement;

    // Inicialmente desabilitado
    expect(addButton).toBeDisabled();

    // Apenas espa√ßos ‚Üí deve permanecer desabilitado (trim)
    fireEvent.change(input, { target: { value: "   " } });
    expect(addButton).toBeDisabled();

    // Texto v√°lido ‚Üí habilita
    fireEvent.change(input, { target: { value: "  Ol√°  " } });
    expect(addButton).not.toBeDisabled();

    // Clicar adiciona e limpa ‚Üí volta a ficar desabilitado
    fireEvent.click(addButton);
    expect(screen.getByText("Ol√°")).toBeInTheDocument();
    expect(input.value).toBe("");
    expect(addButton).toBeDisabled();
  });
});